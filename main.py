import warnings
from dotenv import load_dotenv
import os
from langchain_groq import ChatGroq
from crewai import Agent, Task, Crew
import streamlit as st
from langchain_openai import ChatOpenAI

warnings.filterwarnings('ignore')
load_dotenv()

# Fonction de connexion
def login(username, password):
    # Remplacez ceci par la v√©rification r√©elle des identifiants
    if username == "admin" and password == "aze123":
        return True
    return False

# Fonction pour afficher la page de connexion
def show_login_page():
    st.set_page_config(page_title="Connexion - Blog Post Writer", page_icon=":lock:", layout="centered")
    
    st.markdown("""
        <style>
        .login-container {
            background-color: #f4f4f9;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            max-width: 400px;
            margin: 0 auto;
        }
        .login-title {
            color: #4CAF50;
            text-align: center;
            font-size: 2rem;
            margin-bottom: 1rem;
        }
        .login-input {
            margin-bottom: 1rem;
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .login-button {
            background-color: #4CAF50;
            color: white;
            border-radius: 4px;
            padding: 0.5rem;
            font-size: 1rem;
            width: 100%;
            cursor: pointer;
        }
        .login-button:hover {
            background-color: #45a049;
        }
        .footer-text {
            margin-top: 1rem;
            font-size: 0.875rem;
            color: #888;
            text-align: center;
        }
        </style>
        """, unsafe_allow_html=True)

    st.markdown('<div class="login-container">', unsafe_allow_html=True)
    st.markdown('<h2 class="login-title">Connexion</h2>', unsafe_allow_html=True)

    # Champ de nom d'utilisateur
    username = st.text_input("Username", key="username", help="Entrez votre nom d'utilisateur", placeholder="admin")

    # Champ de mot de passe
    password = st.text_input("Password", type="password", key="password", help="Entrez votre mot de passe", placeholder="aze123")

    # Bouton de connexion
    if st.button("Se connecter", key="login_button"):
        if login(username, password):
            st.session_state.logged_in = True
            st.experimental_rerun()
        else:
            st.error("Identifiants incorrects. Veuillez r√©essayer.")

    st.markdown('<div class="footer-text">D√©velopp√© par DIGITAR</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

# Fonction pour afficher la page principale
def show_main_page():
    st.set_page_config(page_title="DIGITAR Blog Post Writer", page_icon="üìù", layout="centered")
    
    st.markdown("""
        <style>
        .main-container {
            background-color: #2E3B4E;
            color: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            max-width: 800px;
            margin: 0 auto;
        }
        .main-title {
            font-size: 2.5rem;
            color: #FFD700;
            text-align: center;
        }
        .main-description {
            font-size: 1.2rem;
            color: #FFD700;
            text-align: center;
            margin-bottom: 2rem;
        }
        .input-text {
            background-color: #1F2937;
            color: white;
        }
        .stButton button {
            background-color: green;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
        }
        .stButton button:hover {
            background-color: #FFC700;
        }
        .footer-text {
            margin-top: 2rem;
            font-size: 0.875rem;
            color: #888;
            text-align: center;
        }
        </style>
        """, unsafe_allow_html=True)

    st.markdown('<div class="main-container">', unsafe_allow_html=True)
    st.markdown('<div class="main-title">DIGITAR BLOG POST WRITER</div>', unsafe_allow_html=True)
    st.markdown('<div class="main-description">Cette application vous guide √† travers le processus de planification, r√©daction et √©dition d\'un article de blog sur un sujet sp√©cifi√©.</div>', unsafe_allow_html=True)

    # Section de la barre lat√©rale pour la cl√© de l'API et le mod√®le de langage
    st.sidebar.title("Configuration")
    api_key = st.sidebar.text_input("Entrez votre cl√© API:", type="password")
    model_option = st.sidebar.selectbox("Choisissez le mod√®le de langage:", ("Groq", "OpenAI"))

    # Initialiser st.session_state pour la configuration
    if 'configuration_validated' not in st.session_state:
        st.session_state.configuration_validated = False
    if 'llm' not in st.session_state:
        st.session_state.llm = None

    # Ajouter un bouton pour valider la configuration de l'API et du mod√®le
    if st.sidebar.button("Valider la configuration"):
        if api_key and model_option:
            if model_option == "Groq":
                st.session_state.llm = ChatGroq(api_key=api_key)
            elif model_option == "OpenAI":
                st.session_state.llm = ChatOpenAI(api_key=api_key)
            st.session_state.configuration_validated = True
            st.sidebar.success("Configuration valid√©e avec succ√®s!")
        else:
            st.sidebar.error("Veuillez entrer votre cl√© API et choisir un mod√®le de langage.")

    # V√©rifiez que l'utilisateur a valid√© la configuration avant de permettre le d√©marrage du workflow
    if st.session_state.configuration_validated and st.session_state.llm:
        llm = st.session_state.llm

        # Entr√©e pour le sujet
        topic = st.text_input("Entrez le sujet pour l'article de blog:", "Intelligence Artificielle", key="input-text")

        # D√©finir les agents
        planner = Agent(
            role="Planificateur de Contenu",
            goal="Planifier un contenu engageant et factuellement pr√©cis sur le sujet {topic}",
            backstory="Vous travaillez sur la planification d'un article de blog sur le sujet : {topic}. Vous collectez des informations pour aider le public √† apprendre quelque chose et √† prendre des d√©cisions √©clair√©es. Votre travail sert de base pour que le R√©dacteur de Contenu puisse √©crire un article sur ce sujet.",
            allow_delegation=False,
            verbose=True,
            llm=llm
        )

        writer = Agent(
            role="R√©dacteur de Contenu",
            goal="√âcrire un article d'opinion perspicace et factuellement pr√©cis sur le sujet : {topic}",
            backstory="Vous travaillez sur la r√©daction d'un nouvel article d'opinion sur le sujet : {topic}. Vous basez votre r√©daction sur le travail du Planificateur de Contenu, qui fournit un plan et un contexte pertinent sur le sujet. Vous suivez les principaux objectifs et la direction du plan, tels que fournis par le Planificateur de Contenu. Vous fournissez √©galement des id√©es objectives et impartiales et les soutenez avec les informations fournies par le Planificateur de Contenu. Vous reconnaissez dans votre article d'opinion lorsque vos d√©clarations sont des opinions par opposition √† des d√©clarations objectives.",
            allow_delegation=False,
            verbose=True,
            llm=llm
        )

        editor = Agent(
            role="√âditeur",
            goal="√âditer un article de blog donn√© pour l'aligner avec le style r√©dactionnel de l'organisation.",
            backstory="Vous √™tes un √©diteur qui re√ßoit un article de blog du R√©dacteur de Contenu. Votre objectif est de revoir l'article de blog pour vous assurer qu'il suit les meilleures pratiques journalistiques, qu'il offre des points de vue √©quilibr√©s lorsqu'il pr√©sente des opinions ou des assertions, et qu'il √©vite √©galement les sujets ou opinions controvers√©s majeurs lorsque cela est possible.",
            allow_delegation=False,
            verbose=True,
            llm=llm
        )

        # D√©finir les t√¢ches
        plan = Task(
            description=(
                "1. Prioriser les derni√®res tendances, les acteurs cl√©s et les actualit√©s notables sur le sujet {topic}.\n"
                "2. Identifier le public cible, en tenant compte de ses int√©r√™ts et de ses points de douleur.\n"
                "3. D√©velopper un plan de contenu d√©taill√© comprenant une introduction, des points cl√©s et une conclusion.\n"
                "4. Cr√©er un cadre pour l'article qui guide le r√©dacteur dans le processus de cr√©ation de contenu."
            ),
            agent=planner,
            parameters={'topic': topic},
        )

        draft = Task(
            description=(
                "En utilisant le plan fourni par le Planificateur de Contenu, r√©digez un premier brouillon pour un article de blog sur le sujet {topic}.\n"
                "Assurez-vous que le contenu est bien structur√©, engageant et informatif."
            ),
            agent=writer,
            parameters={'topic': topic},
        )

        review = Task(
            description=(
                "Revoyez le brouillon de l'article de blog fourni par le R√©dacteur de Contenu. Assurez-vous qu'il est exempt de fautes d'orthographe et de grammaire, qu'il est bien structur√© et qu'il r√©pond aux exigences de l'organisation en mati√®re de contenu.\n"
                "Faites des suggestions d'am√©lioration et assurez-vous que le contenu est pr√©cis, √©quilibr√© et objectif."
            ),
            agent=editor,
            parameters={'topic': topic},
        )

        # Instancier Crew et ajouter des t√¢ches
        crew = Crew(
            name="Blog Post Writer Crew",
            tasks=[plan, draft, review]
        )

        st.markdown('<div class="main-title">D√©marrer le Workflow</div>', unsafe_allow_html=True)
        st.markdown('<div class="main-description">Cliquez sur le bouton ci-dessous pour commencer le processus de cr√©ation de contenu pour votre article de blog.</div>', unsafe_allow_html=True)

        if st.button("D√©marrer le workflow"):
            crew.run()

    else:
        st.error("Veuillez valider la configuration avant de d√©marrer le workflow.")

    st.markdown('<div class="footer-text">D√©velopp√© par DIGITAR</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

# Page de connexion ou page principale
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

if st.session_state.logged_in:
    show_main_page()
else:
    show_login_page()
